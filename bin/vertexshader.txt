attribute vec3 positionzz;
attribute vec3 colorzz;
attribute vec4 normalzz;
attribute vec4 tangent;
attribute vec2 texcoords;

attribute vec4 amb_in;
attribute vec4 diff_in;
attribute vec4 spec_in;
attribute float shine_in;

varying vec2 out_tc;
varying vec3 out_L;
varying vec3 out_H;

uniform vec4 light_pos;
uniform vec4 view_pos;

void main(void)
{
    vec3 vertex_normal = normalize(normalzz.xyz);
	vec3 L = vec3(light_pos) - positionzz;

	vec3 V = normalize(view_pos.xyz - positionzz);
	vec3 H = normalize(V + normalize(L));

	vec4 tangeeent = vec4(0, 0, -1, -1);

	vec3 binormal = cross(vertex_normal, tangeeent.xyz) * tangeeent.w;

	//out_L = binormal.xyz;
	out_L.x = dot(L, tangeeent.xyz);
	out_L.y = dot(L, binormal);
	out_L.z = dot(L, vertex_normal);

	out_H.x = dot(H, tangeeent.xyz);
	out_H.y = dot(H, binormal);
	out_H.z = dot(H, vertex_normal);

	out_tc = texcoords;

	gl_Position = gl_ModelViewProjectionMatrix * vec4(positionzz, 1.0);
}

